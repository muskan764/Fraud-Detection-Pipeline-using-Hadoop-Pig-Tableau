# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2YSgRwhCpdQ1qVAXTexluDLZ44U4OmV
"""

!pip install -q transformers datasets evaluate scikit-learn accelerate

import os, numpy as np, pandas as pd, torch
from sklearn.model_selection import train_test_split
from sklearn.utils.class_weight import compute_class_weight
from datasets import Dataset
from transformers import (
    AutoTokenizer, AutoModelForSequenceClassification,
    DataCollatorWithPadding, Trainer, TrainingArguments
)
import evaluate

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

def load_data(true_path, fake_path):
    true_df = pd.read_csv(true_path)
    fake_df = pd.read_csv(fake_path)

    # Combine title + text
    true_df["content"] = true_df["title"].fillna("") + " " + true_df["text"].fillna("")
    fake_df["content"] = fake_df["title"].fillna("") + " " + fake_df["text"].fillna("")

    # Label encoding: REAL=1, FAKE=0
    true_df = pd.DataFrame({"text": true_df["content"].astype(str), "label": 1})
    fake_df = pd.DataFrame({"text": fake_df["content"].astype(str), "label": 0})

    df = pd.concat([true_df, fake_df], ignore_index=True)
    df = df.sample(frac=1.0, random_state=42).reset_index(drop=True)
    return df

def split_data(df):
    train_df, test_df = train_test_split(df, test_size=0.1, stratify=df["label"], random_state=42)
    train_df, val_df  = train_test_split(train_df, test_size=0.1, stratify=train_df["label"], random_state=42)

    train_ds = Dataset.from_pandas(train_df, preserve_index=False)
    val_ds   = Dataset.from_pandas(val_df, preserve_index=False)
    test_ds  = Dataset.from_pandas(test_df, preserve_index=False)
    return train_ds, val_ds, test_ds, train_df

def build_model(model_name, train_df):
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    num_labels = 2
    model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=num_labels)

    # Class weights for imbalance
    labels_np = train_df["label"].to_numpy()
    class_weights = compute_class_weight("balanced", classes=np.array([0,1]), y=labels_np)
    class_weights = torch.tensor(class_weights, dtype=torch.float)

    old_forward = model.forward
    def weighted_forward(**kwargs):
        outputs = old_forward(**kwargs)
        if "labels" in kwargs:
            loss_fct = torch.nn.CrossEntropyLoss(weight=class_weights.to(outputs.logits.device))
            loss = loss_fct(outputs.logits.view(-1, num_labels), kwargs["labels"].view(-1))
            outputs.loss = loss
        return outputs
    model.forward = weighted_forward

    return model, tokenizer

def train_model(model, tokenizer, train_ds, val_ds):
    def tokenize(batch): return tokenizer(batch["text"], truncation=True, max_length=256)
    train_enc = train_ds.map(tokenize, batched=True)
    val_enc   = val_ds.map(tokenize, batched=True)

    acc, f1, prec, rec = evaluate.load("accuracy"), evaluate.load("f1"), evaluate.load("precision"), evaluate.load("recall")
    def compute_metrics(eval_pred):
        logits, labels = eval_pred
        preds = np.argmax(logits, axis=-1)
        return {
            "accuracy": acc.compute(predictions=preds, references=labels)["accuracy"],
            "f1":       f1.compute(predictions=preds, references=labels, average="weighted")["f1"],
            "precision":prec.compute(predictions=preds, references=labels, average="weighted")["precision"],
            "recall":   rec.compute(predictions=preds, references=labels, average="weighted")["recall"],
        }

    data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

    training_args = TrainingArguments(
        output_dir="./bert-fake-news",
        learning_rate=2e-5,
        per_device_train_batch_size=16,
        per_device_eval_batch_size=32,
        num_train_epochs=3,
        weight_decay=0.01,
        eval_strategy="epoch",
        save_strategy="epoch",
        load_best_model_at_end=True,
        metric_for_best_model="f1",
        logging_steps=50,
        report_to="none",
        fp16=torch.cuda.is_available(),
    )

    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_enc,
        eval_dataset=val_enc,
        tokenizer=tokenizer,
        data_collator=data_collator,
        compute_metrics=compute_metrics,
    )
    trainer.train()
    return trainer

def evaluate_and_save(trainer, test_ds, tokenizer, save_dir="./bert-fake-news-best"):
    def tokenize(batch): return tokenizer(batch["text"], truncation=True, max_length=256)
    test_enc = test_ds.map(tokenize, batched=True, remove_columns=["text"])

    metrics = trainer.evaluate(eval_dataset=test_enc)
    print("Test Metrics:", metrics)

    trainer.save_model(save_dir)
    tokenizer.save_pretrained(save_dir)
    print(f"Model saved at {save_dir}")

def predict(texts, model, tokenizer):
    enc = tokenizer(texts, return_tensors="pt", truncation=True, padding=True, max_length=256)
    enc = {k: v.to(model.device) for k, v in enc.items()}
    with torch.no_grad():
        logits = model(**enc).logits
    probs = torch.softmax(logits, dim=-1).cpu().numpy()
    preds = probs.argmax(axis=-1)
    label_map = {0: "FAKE", 1: "REAL"}
    return [{"label": label_map[int(p)], "p_fake": float(pr[0]), "p_real": float(pr[1])} for p, pr in zip(preds, probs)]

def load_data(true_path, fake_path):
    import pandas as pd

    true_df = pd.read_csv(true_path)
    fake_df = pd.read_csv(fake_path)

    # Combine title + text
    true_df["content"] = true_df["title"].fillna("") + " " + true_df["text"].fillna("")
    fake_df["content"] = fake_df["title"].fillna("") + " " + fake_df["text"].fillna("")

    # Label encoding: REAL=1, FAKE=0
    true_df = pd.DataFrame({"text": true_df["content"].astype(str), "label": 1})
    fake_df = pd.DataFrame({"text": fake_df["content"].astype(str), "label": 0})

    df = pd.concat([true_df, fake_df], ignore_index=True)
    df = df.sample(frac=1.0, random_state=42).reset_index(drop=True)
    return df

TRUE_PATH = "/content/Fake.csv"
FAKE_PATH = "/content/Fake.csv"

df = load_data(TRUE_PATH, FAKE_PATH)
print("Class distribution:\n", df["label"].value_counts())

if __name__ == "__main__":
    TRUE_PATH = "/content/True.csv"
    FAKE_PATH = "/content/Fake.csv"

    df = load_data(TRUE_PATH, FAKE_PATH)
    print("Class distribution:\n", df["label"].value_counts())

    train_ds, val_ds, test_ds, train_df = split_data(df)
    model, tokenizer = build_model("bert-base-uncased", train_df)
    trainer = train_model(model, tokenizer, train_ds, val_ds)

    evaluate_and_save(trainer, test_ds, tokenizer)

    # Quick demo
    samples = [
        "Breaking: Scientists discover water on the Sun!!!",
        "The WHO released their annual report on malaria trends."
    ]
    print(predict(samples, model, tokenizer))

